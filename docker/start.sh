#!/usr/bin/env python3

import argparse
import tarfile
import tempfile
import os


def main():
    parser = argparse.ArgumentParser(
        prog='start', description='BundleGen runner')
    parser.add_argument('image', help="Path to the .tar image generated by the SDK")
    parser.add_argument('platform', help="Path to the platform template JSON file")
    parser.add_argument('metadata', help="Path to app metadata JSON file")

    args = parser.parse_args()

    if not os.path.exists(args.image):
        print("Could not find file", args.image)
        return

    image_name = os.path.basename(args.image).replace('.tar', '')

    if not os.path.exists(args.platform):
        print("Could not find file", args.platform)
        return

    platform_template_dir = os.path.dirname(args.platform)
    platform_template_name = os.path.basename(args.platform).replace('.json', '')

    if not os.path.exists(args.metadata):
        print("Could not find file", args.metadata)

    os.environ['TEMPLATE_DIR'] = platform_template_dir
    os.environ['METADATA_FILE'] = args.metadata

    # Extract the .tar to a temp directory
    img_temp_path = tempfile.mkdtemp()

    os.environ['EXTRACTED_IMG_DIR'] = img_temp_path

    with tarfile.open(args.image) as tar:
        tar.extractall(img_temp_path)

    os.system('docker-compose run bundlegen generate -y --platform {} --appmetadata /home/bundlegenuser/metadata.json oci:/image:latest /bundles/{}'.format(
        platform_template_name, image_name
    ))

    print("Done!")
    print("Download the OCI bundle at http://localhost:8080/{}.tar.gz".format(image_name))

if __name__ == "__main__":
    main()
